#############################################################################################
# This YML file declares the serverless stack which will be automatically deployed in AWS
# uppon running: $ serverless deploy <environment>.
#
# Author: Victor Santos Uceta
# License: Attribution-NonCommercial-NoDerivatives 4.0 International
#############################################################################################
# name of the service
service: pro-series-serverless
# reinforce the serverless framework version
frameworkVersion: "=1.38.0"
# the provider specification. We will deploy the stack using AWS.
provider:
  name: aws                   # the name of the service(AWS in this case).
  stage: ${opt:stage, 'dev'}  # the stage default, if not provided it will be 'dev'
  runtime: nodejs8.10         # we want the default runtime of the functions to be Node.js 8.10.
  region: us-east-1           # the AWS region where the deployment will reside.
  iamRoleStatements:          # declaration of the permission applied to the serverless functions.
    - Effect: Allow
      Action:
        - s3:DeleteObject
        - s3:GetObject
      Resource:               # allow delete and get on S3 Picture bucket.
         - Fn::Join:
           - ""
           - 
            - "arn:aws:s3:::"
            - Ref: PicturesBucket
            - "/*"
# The following plugins are used to easy some functions of the serverless
# workflow.
plugins:
  - serverless-finch                  # 
  - serverless-webpack
  - serverless-s3-remover
  - serverless-stack-output
  - serverless-dynamodb-autoscaling
  - serverless-single-page-app-plugin

custom:
  resourceNames: 
    # change this word to one of your choice, S3 public web buckets needs to be unique.
    # really... DON'T USE avocado
    uniqueWord: avocado
    uniqueStage: ${self:provider.stage}${self:custom.resourceNames.uniqueWord}
    frontEndBucket: ${self:custom.resourceNames.uniqueStage}-front-end 
    pictureBucket: ${self:custom.resourceNames.uniqueStage}-picture 
    pictureTable: ${self:custom.resourceNames.uniqueStage}-picture-table
    identityPool: ${self:custom.resourceNames.uniqueStage}IdentityPool
    userPool: ${self:custom.resourceNames.uniqueStage}-user-pool
    poolClient: ${self:custom.resourceNames.uniqueStage}-user-pool-client
  output:
    handler: scripts/config.handler # Same syntax as you already know
  capacities:
    - table: PicturesTable  # DynamoDB Resource
      read:
        minimum: 1        # Minimum read capacity
        maximum: 10     # Maximum read capacity
        usage: 0.75       # Targeted usage percentage
      write:
        minimum: 1       # Minimum write capacity
        maximum: 10      # Maximum write capacity
        usage: 0.5        # Targeted usage percentage
  client:
    bucketName: ${self:custom.resourceNames.frontEndBucket}
    distributionFolder: ../build 
    indexDocument: index.html
    errorDocument: index.html
  remover:
     buckets:
       - ${self:custom.resourceNames.frontEndBucket}
       - ${self:custom.resourceNames.pictureBucket}
# you can add packaging information here, include or exclude files that
# will be deployed to the functions.
# package:
#   include:
#      - src/test.jpg
#  exclude:
#    - exclude-me.js

functions: 
    dynamodb-trigger:
      name: trigger
      handler: src/trigger.handler 
      events:
        - stream:
            type: dynamodb
            batchSize: 1
            startingPosition: LATEST
            arn:
              Fn::GetAtt:
                - PicturesTable
                - StreamArn
      environment: 
        PICTURE_BUCKET: ${self:custom.resourceNames.pictureBucket}
    image-analysis:
      name: analysis
      handler: src/image.handler
      events:
        - http:
            path: image/analysis
            method: post     
            cors: true       
      environment: 
        PICTURE_BUCKET: ${self:custom.resourceNames.pictureBucket}
resources:
    - ${file(resources/security.yml)}
    - ${file(resources/data-storage.yml)}
    - ${file(resources/object-storage.yml)}
    - ${file(resources/misc.yml)}
